name: Staging-Environment-CI-CD

on:
  workflow_dispatch:
  push:
    branches:
      - staging

permissions:
  issues: write
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pipenv && pipenv install --dev

      - name: Download NLTK data
        run: pipenv run python -m nltk.downloader punkt stopwords averaged_perceptron_tagger wordnet omw-1.4

      - name: Run unit tests
        run: pipenv run pytest tests/unit_tests/

  build-infrastructure:
    name: Build Infrastructure
    runs-on: ubuntu-latest
    environment: stg
    needs: test
    outputs:
      ecr_repo: ${{ steps.tf-apply.outputs.ecr_repo }}
      model_registry_bucket: ${{ steps.tf-apply.outputs.model_registry_bucket }}
      lambda_function: ${{ steps.tf-apply.outputs.lambda_function }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform Configuration
        working-directory: 'terraform'
        env:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
        run: terraform init -input=false

      - name: Terraform plan
        id: tf-plan
        working-directory: 'terraform'
        env:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD}}
        run: terraform plan -var-file="./modules/vars/${TF_WORKSPACE}.tfvars" -input=false

      - name: Terraform apply
        id: tf-apply
        working-directory: 'terraform'
        if: ${{ steps.tf-plan.outcome }} == 'success'
        env:
          TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD}}
        run: |
          terraform apply -var-file="./modules/vars/${TF_WORKSPACE}.tfvars" -input=false -auto-approve
          echo "ecr_repo=$(terraform output -raw ecr_repo)" >> $GITHUB_OUTPUT
          echo "model_registry_bucket=$(terraform output -raw model_registry_model_bucket)" >> $GITHUB_OUTPUT
          echo "lambda_function=$(terraform output -raw lambda_function)" >> $GITHUB_OUTPUT

  sync-model-registry:
    name: Sync Model Registry
    runs-on: ubuntu-latest
    environment: stg
    needs: build-infrastructure
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Sync Model Registry
        env:
          FROM_BUCKET: s3://${{ secrets.DEV_MODEL_REGISTRY }}/${{ secrets.EXPERIMENT_ID }}/${{ secrets.RUN_ID }}
          TO_BUCKET: s3://${{ needs.build-infrastructure.outputs.model_registry_bucket }}/${{ secrets.EXPERIMENT_ID }}/${{ secrets.RUN_ID }}
        run: aws s3 sync $FROM_BUCKET $TO_BUCKET

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: stg
    needs: [build-infrastructure, sync-model-registry]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print variable
        id: print-variable
        working-directory: 'deployment'
        run: |
          echo 'Model Registry:  ${{ steps.login-ecr.outputs.registry }}'
          echo 'ECR Repo:  ${{ needs.build-infrastructure.outputs.ecr_repo }}'
          echo 'Model Bucket:  ${{ needs.build-infrastructure.outputs.model_registry_bucket }}'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        uses: docker/build-push-action@v4
        with:
          context: deployment/
          build-args: |
            EXPERIMENT_ID=${{secrets.EXPERIMENT_ID}}
            RUN_ID=${{secrets.RUN_ID}}
            MODEL_BUCKET=${{ needs.build-infrastructure.outputs.model_registry_bucket }}
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ needs.build-infrastructure.outputs.ecr_repo }}:latest

      - name: Update Lambda
        env:
          LAMBDA_FUNCTION: ${{ needs.build-infrastructure.outputs.lambda_function }}
          IMAGE_URI: ${{ steps.login-ecr.outputs.registry }}/${{ needs.build-infrastructure.outputs.ecr_repo }}:latest
        run: |
          STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "us-west-2" --query 'Configuration.LastUpdateStatus' --output text)
              while [[ "$STATE" == "InProgress" ]]
              do
                  echo "sleep 5sec ...."
                  sleep 5s
                  STATE=$(aws lambda get-function --function-name $LAMBDA_FUNCTION --region "us-west-2" --query 'Configuration.LastUpdateStatus' --output text)
                  echo $STATE
              done

          aws lambda update-function-code --function-name $LAMBDA_FUNCTION --image-uri $IMAGE_URI

  staging_to_production:
    name: Push Changes to Production Environment
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Open Pull Request
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: gh pr create --title "Merge Staging to Main" --body "This is a pull request from staging to main." --base main --head staging
